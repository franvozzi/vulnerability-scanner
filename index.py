import requests
from bs4 import BeautifulSoup
import threading
import re
import os
from urllib.parse import urljoin

# Función para verificar encabezados de seguridad
def check_security_headers(url):
    try:
        response = requests.get(url)
        headers = response.headers

        required_headers = ['Content-Security-Policy', 'X-XSS-Protection', 'X-Frame-Options', 'Strict-Transport-Security']
        missing_headers = [header for header in required_headers if header not in headers]

        if missing_headers:
            print(f"[+] Missing security headers: {missing_headers}")
        else:
            print("[+] All recommended security headers are present.")
    except Exception as e:
        print(f"[-] Error checking headers: {e}")

# Función para verificar archivos sensibles expuestos
def check_sensitive_files(url):
    sensitive_files = ['.env', 'wp-config.php', 'backup.sql', 'admin.php']
    
    for file in sensitive_files:
        full_url = urljoin(url, file)
        response = requests.get(full_url)
        
        if response.status_code == 200:
            print(f"[+] Exposed sensitive file found: {full_url}")
        else:
            print(f"[-] File not found: {file}")

# Función para detectar posibles vulnerabilidades de XSS
def check_xss(url):
    try:
        response = requests.get(url)
        soup = BeautifulSoup(response.text, 'html.parser')
        forms = soup.find_all('form')
        
        if forms:
            print(f"[+] Found {len(forms)} forms, possible XSS vulnerability.")
        else:
            print("[-] No forms found, XSS less likely.")
    except Exception as e:
        print(f"[-] Error checking for XSS: {e}")

# Función para detectar vulnerabilidades de SQL Injection
def check_sql_injection(url):
    sql_payload = "' OR 1=1 --"
    
    if "?" not in url:
        url += "?"
    
    full_url = url + sql_payload
    try:
        response = requests.get(full_url)
        
        if "error" in response.text or "SQL" in response.text:
            print(f"[+] Potential SQL Injection vulnerability at {full_url}")
        else:
            print("[-] No SQL Injection vulnerability detected.")
    except Exception as e:
        print(f"[-] Error checking SQL Injection: {e}")

# Función para detectar subdominios
def check_subdomains(domain):
    subdomains = ["www", "admin", "mail", "ftp", "test"]
    
    for subdomain in subdomains:
        full_url = f"http://{subdomain}.{domain}"
        try:
            response = requests.get(full_url)
            if response.status_code == 200:
                print(f"[+] Subdomain found: {full_url}")
            else:
                print(f"[-] Subdomain not found: {full_url}")
        except Exception as e:
            print(f"[-] Error checking subdomains: {e}")

# Función para verificar la configuración SSL/TLS
def check_ssl_tls(url):
    try:
        response = requests.get(url)
        if response.url.startswith("https"):
            print("[+] SSL/TLS is enabled.")
        else:
            print("[-] SSL/TLS is not enabled.")
    except Exception as e:
        print(f"[-] Error checking SSL/TLS: {e}")

# Función para detectar redirección abierta
def check_open_redirect(url):
    redirect_payload = "//malicious-site.com"
    
    full_url = urljoin(url, f"?next={redirect_payload}")
    try:
        response = requests.get(full_url, allow_redirects=False)
        
        if response.status_code in [301, 302] and "malicious-site" in response.headers.get("Location", ""):
            print(f"[+] Open Redirect vulnerability detected: {full_url}")
        else:
            print("[-] No Open Redirect vulnerability detected.")
    except Exception as e:
        print(f"[-] Error checking Open Redirect: {e}")

# Función principal para gestionar el escaneo
def vulnerability_scanner(url):
    domain = url.split("//")[-1].split("/")[0]
    
    threads = []
    
    # Verificación de encabezados de seguridad
    t1 = threading.Thread(target=check_security_headers, args=(url,))
    threads.append(t1)
    
    # Verificación de archivos sensibles expuestos
    t2 = threading.Thread(target=check_sensitive_files, args=(url,))
    threads.append(t2)
    
    # Verificación de vulnerabilidad XSS
    t3 = threading.Thread(target=check_xss, args=(url,))
    threads.append(t3)
    
    # Verificación de vulnerabilidad SQL Injection
    t4 = threading.Thread(target=check_sql_injection, args=(url,))
    threads.append(t4)
    
    # Verificación de SSL/TLS
    t5 = threading.Thread(target=check_ssl_tls, args=(url,))
    threads.append(t5)
    
    # Detección de subdominios
    t6 = threading.Thread(target=check_subdomains, args=(domain,))
    threads.append(t6)
    
    # Verificación de redirección abierta
    t7 = threading.Thread(target=check_open_redirect, args=(url,))
    threads.append(t7)
    
    for thread in threads:
        thread.start()

    for thread in threads:
        thread.join()

# Iniciar el escáner
if __name__ == "__main__":
    target_url = input("Enter the target URL (e.g., http://example.com): ")
    vulnerability_scanner(target_url)
